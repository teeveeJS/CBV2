class Coordinates {
  static toAlgebraic(piece, move, board, promPiece) {
    // TODO: handle the possibility of multiple pieces of same type moving to the same square

    //will likely be used to display the coordinates after the move
    //should be called before the move is made on the board
    if (board.isCastle(move)) {
      return (move.end.alf === 2) ? "0-0-0" : "0-0";
    }

    let p = (piece.toUpperCase() === "P") ? "" : piece.toUpperCase();
    let x = (board.isCapture(move) ||
             board.isEnPassant(move)) ? "x" : "";
    if (!p && x) p = Coordinates.alfToStr(move.start.alf);
    let prom = (promPiece) ? ("=" + promPiece.toUpperCase()) : "";

    let check = "";
    let b_new = board.movePieces(piece, move);
    if (b_new.isCheck(b_new.move_white)) check = "+";
    else if (b_new.isCheckmate()) check = "#";

    return p + x + Coordinates.sqToAlg(move.end) + prom + check;
  }

  static sqEquals(sq1, sq2) {
    if (sq1 === null || sq2 === null) return false;
    if (typeof sq1 === "string") sq1 = Coordinates.sqFromStr(sq1);
    if (typeof sq2 === "string") sq2 = Coordinates.sqFromStr(sq2);
    return sq1.alf === sq2.alf && sq1.num === sq2.num;
  }

  static alfToStr(num) {
    // convert int alf to string/char
    return "abcdefgh"[num];
  }

  static sqToAlg(sq) {
    // converts an object representation of square into an algebraic string
    return Coordinates.alfToStr(sq.alf) + (sq.num + 1).toString();
  }

  static sqFromStr(str) {
    let a = str.charCodeAt(0) - 97;
    let n = str.charCodeAt(1) - 49;
    if (a < 0 || a > 7 || n < 0 || n > 7) throw "Cannot convert string to a valid square";
    else return {num: n, alf: a};
  }

  static alfToNum(str) {
    return {
      start: Coordinates.sqFromStr(str.substring(0, 2)),
      end: Coordinates.sqFromStr(str.substring(2, 4))
    };
  }

  // static mouseToCoord(mouseX, mouseY, board) {
  //   let mT = parseInt(document.getElementById("board").style.marginTop) + 8;
  //   let mL = parseInt(document.getElementById("board").style.marginLeft) + 8;
  //
  //   mX = mouseX - mL;
  //   mY = mouseY - mT;
  //
  //   let sq = {
  //     alf: Math.floor(mX / SQ_SIZE),
  //     num: Math.floor(mY / SQ_SIZE)
  //   }
  //
  //   //console.log(sq.num);
  //
  //   if (board.orientation) {
  //     sq.num = 7 - sq.num;
  //   }
  //
  //   //console.log(sq);
  //   return sq;
  // }
}

// export { toAlgebraic, sqEquals, alfToStr, sqToAlg, sqFromStr, alfToNum };
module.exports = Coordinates;
