const color = require("utils").color;

function isLegalPawn(piece, move, board) {
  let deltaAlf = Math.abs(move.end.alf - move.start.alf);
  let deltaNum = move.end.num - move.start.num;

  let dir = color(piece) ? 1 : -1;
  // -1: Black, 1: White

  //i know i could use else if's ... maybe will once i get all the different rules sorted out
  //double move
  let startNum = color(piece) ? 1 : 6;
  if (deltaAlf === 0 && dir * deltaNum === 2 && move.start.num === startNum &&
    board.isSqEmpty(move.end.num - dir, move.end.alf) &&
    board.isSqEmpty(move.end.num, move.end.alf)) {
      return true;
  };
  //single move forward
  if (deltaAlf === 0 && dir * deltaNum === 1 &&
    board.isSqEmpty(move.end.num, move.end.alf)) {
      return true;
  };
  //captures
  if (deltaAlf === 1 && dir * deltaNum === 1 &&
    board.isCapture(move)) {
      return true;
  }

  //the last case to check: en passant
  return board.isEnPassant(move);
}

function getPawnThreats(piece, sq) {
  let dir = color(piece) ? 1 : -1;
  let threats = [];
  if (sq.alf + 1 < 8) {
    threats.push({alf: sq.alf + 1, num: sq.num + dir});
  }
  if (sq.alf > 0) { // sq.alf - 1 >= 0
    threats.push({alf: sq.alf - 1, num: sq.num + dir});
  }
  return threats;
}

// export { isLegalPawn, getPawnThreats };
module.exports.isLegalPawn = isLegalPawn;
module.exports.getPawnThreats = getPawnThreats;
